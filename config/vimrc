set nocompatible
let mapleader=","
let maplocalleader=","
nmap \ <Leader><Leader>
filetype plugin indent on
execute pathogen#infect()

"Dont use LaTeXBox indents
let g:LatexBox_custom_indent = 0
let g:tex_indent_brace = 0

"Only show quickfix buffer on errors, not warnings
let g:LatexBox_quickfix = 4

"Keep persistent undo trees
if has('persistent_undo')
    set undodir=$HOME/.vim/vimundo
    set undofile
endif

"Don't show scratch preview
set completeopt-=preview

"Number lines
set relativenumber
"Leave 3 lines above, below cursor
set scrolloff=3

"Show line, column number
set ruler

"Make sure backspace works like you'd expect
set backspace=indent,eol,start

"Save,load folds automatically
autocmd BufWinLeave *.* mkview
autocmd BufWinEnter *.* silent loadview

"Tab formatting
"4 spaces per tab
set softtabstop=4
set shiftwidth=4
set tabstop=4
set expandtab
set autoindent
"set smartindent

"Set text width to 79
"Wrap after tw
set tw=79
set formatoptions+=w

"A few misc things
syntax on
set smartcase
set ic
set showmatch
set incsearch
set hlsearch
set wildignorecase

"Keep current buffer at the top for sp, left for vsp
set splitbelow
set splitright

"Colorscheme
set t_Co=256
set background=dark
colorscheme neonwave

"Yank to clipboard
if has ('macunix')
    nnoremap yy yy"*yy
    vnoremap y ygv"*y
endif

"Start with rainbow parenthesis on
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

"Remove trailing whitespace
nnoremap <leader>W :%s/\s\+$// <bar> nohlsearch<CR> <bar> :echo("Whitespace Removed")<CR>

"Reformat current paragraph
"Use with caution
nnoremap <Leader>F gqip :%s/\s\+$// <bar> nohlsearch <CR><C-o>

"Toggle Tab Highlighting
map <Leader>t :ToggleTabHi<CR>

"Toggle Trailing Whitespace Highlighting
map <Leader>w :ToggleSpaceHi<CR>

"Toggle spelling
nnoremap <Leader>z :set spell!<CR>

"Align in visual
vnoremap <Leader>te :Tab /=<CR>
vnoremap <Leader>tc :Tab /:<CR>

"Toggle rainbow parentheses
nnoremap <Leader>r :RainbowParenthesesToggle<CR>

"Clear search highlight
nmap <Leader>/ :nohlsearch<CR>

"Toggle colorcolumn
nnoremap <Leader>c :exec 'set' (&colorcolumn ==# '') ? 'colorcolumn=+1' : 'colorcolumn='<CR>

"Compile, view latex commands
nnoremap <Leader>lw :w<CR> :Latexmk<CR>
nnoremap <Leader>vv :w<CR> :Latexmk<CR> :LatexView<CR>

"Easily switch sp to vsp
nnoremap <Leader>vs <C-w>t<C-w>K
"Easily switch vsp to sp
nnoremap <Leader>sv <C-w>t<C-w>H

"Disable EX mode
noremap Q <NOP>

"Disable help
noremap <F1> <NOP>
noremap! <F1> <NOP>

"Remap tab to change tab levels in visual mode
vnoremap <TAB> >
vnoremap <S-TAB> <

"Make text scolling constant
" nnoremap j gj
" nnoremap k gk
" nnoremap gj j
" nnoremap gk k

"Allow writing even if you forgot to sudo
cmap w!! w !sudo tee % >/dev/null
cmap x!! x !sudo tee % >/dev/null

set autochdir

if filereadable(expand("$HOME/.vimrc.local"))
    source $HOME/.vimrc.local
endif

"Toggle all for rainbow parentheses
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

"Search for selected text, forwards or backwards.
vnoremap <silent> * :<C-U>
    \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
    \gvy/<C-R><C-R>=substitute(
    \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
    \gV:call setreg('"', old_reg, old_regtype)<CR>

vnoremap <silent> # :<C-U>
    \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
    \gvy?<C-R><C-R>=substitute(
    \escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
    \gV:call setreg('"', old_reg, old_regtype)<CR>
